// NOTE: This is auto-generated by scripts/meaning_autogen.rb
impl super::Meaning {
    pub(super) fn node(&mut self, node: &prism::Node) {
        match node {
            prism::Node::AliasGlobalVariableNode { .. } => {
                let node = node.as_alias_global_variable_node().unwrap();
                self.start_node("AliasGlobalVariableNode");
                self.node_field("new_name", node.new_name());
                self.node_field("old_name", node.old_name());
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.end_node();
            }

            prism::Node::AliasMethodNode { .. } => {
                let node = node.as_alias_method_node().unwrap();
                self.start_node("AliasMethodNode");
                self.node_field("new_name", node.new_name());
                self.node_field("old_name", node.old_name());
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.end_node();
            }

            prism::Node::AlternationPatternNode { .. } => {
                let node = node.as_alternation_pattern_node().unwrap();
                self.start_node("AlternationPatternNode");
                self.node_field("left", node.left());
                self.node_field("right", node.right());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::AndNode { .. } => {
                let node = node.as_and_node().unwrap();
                self.start_node("AndNode");
                self.node_field("left", node.left());
                self.node_field("right", node.right());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::ArgumentsNode { .. } => {
                let node = node.as_arguments_node().unwrap();
                self.start_node("ArgumentsNode");
                self.list_field("arguments", node.arguments());
                self.end_node();
            }

            prism::Node::ArrayNode { .. } => {
                let node = node.as_array_node().unwrap();
                self.start_node("ArrayNode");
                self.list_field("elements", node.elements());
                self.end_node();
            }

            prism::Node::ArrayPatternNode { .. } => {
                let node = node.as_array_pattern_node().unwrap();
                self.start_node("ArrayPatternNode");
                self.opt_field("constant", node.constant());
                self.list_field("requireds", node.requireds());
                self.opt_field("rest", node.rest());
                self.list_field("posts", node.posts());
                self.end_node();
            }

            prism::Node::AssocNode { .. } => {
                let node = node.as_assoc_node().unwrap();
                self.start_node("AssocNode");
                self.node_field("key", node.key());
                self.node_field("value", node.value());
                self.opt_loc_field("operator_loc", node.operator_loc());
                self.end_node();
            }

            prism::Node::AssocSplatNode { .. } => {
                let node = node.as_assoc_splat_node().unwrap();
                self.start_node("AssocSplatNode");
                self.opt_field("value", node.value());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::BackReferenceReadNode { .. } => {
                self.atom_node("BackReferenceReadNode", node);
            }

            prism::Node::BeginNode { .. } => {
                let node = node.as_begin_node().unwrap();
                self.start_node("BeginNode");
                self.opt_loc_field("begin_keyword_loc", node.begin_keyword_loc());
                self.opt_field("statements", node.statements().map(|n| n.as_node()));
                self.opt_field("rescue_clause", node.rescue_clause().map(|n| n.as_node()));
                self.opt_field("else_clause", node.else_clause().map(|n| n.as_node()));
                self.opt_field("ensure_clause", node.ensure_clause().map(|n| n.as_node()));
                self.opt_loc_field("end_keyword_loc", node.end_keyword_loc());
                self.end_node();
            }

            prism::Node::BlockArgumentNode { .. } => {
                let node = node.as_block_argument_node().unwrap();
                self.start_node("BlockArgumentNode");
                self.opt_field("expression", node.expression());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::BlockLocalVariableNode { .. } => {
                self.atom_node("BlockLocalVariableNode", node);
            }

            prism::Node::BlockNode { .. } => {
                let node = node.as_block_node().unwrap();
                self.start_node("BlockNode");
                self.opt_field("parameters", node.parameters());
                self.opt_field("body", node.body());
                self.end_node();
            }

            prism::Node::BlockParameterNode { .. } => {
                let node = node.as_block_parameter_node().unwrap();
                self.start_node("BlockParameterNode");
                self.opt_loc_field("name_loc", node.name_loc());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::BlockParametersNode { .. } => {
                let node = node.as_block_parameters_node().unwrap();
                self.start_node("BlockParametersNode");
                self.opt_field("parameters", node.parameters().map(|n| n.as_node()));
                self.list_field("locals", node.locals());
                self.end_node();
            }

            prism::Node::BreakNode { .. } => {
                let node = node.as_break_node().unwrap();
                self.start_node("BreakNode");
                self.opt_field("arguments", node.arguments().map(|n| n.as_node()));
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.end_node();
            }

            prism::Node::CallAndWriteNode { .. } => {
                let node = node.as_call_and_write_node().unwrap();
                self.start_node("CallAndWriteNode");
                self.opt_field("receiver", node.receiver());
                self.call_operator_loc_field(node.call_operator_loc());
                self.message_loc_field(node.message_loc());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::CallNode { .. } => {
                let node = node.as_call_node().unwrap();
                self.start_node("CallNode");
                self.opt_field("receiver", node.receiver());
                self.call_operator_loc_field(node.call_operator_loc());
                self.message_loc_field(node.message_loc());
                self.opt_field("arguments", node.arguments().map(|n| n.as_node()));
                self.opt_field("block", node.block());
                self.end_node();
            }

            prism::Node::CallOperatorWriteNode { .. } => {
                let node = node.as_call_operator_write_node().unwrap();
                self.start_node("CallOperatorWriteNode");
                self.opt_field("receiver", node.receiver());
                self.call_operator_loc_field(node.call_operator_loc());
                self.message_loc_field(node.message_loc());
                self.opt_loc_field("binary_operator_loc", Some(node.binary_operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::CallOrWriteNode { .. } => {
                let node = node.as_call_or_write_node().unwrap();
                self.start_node("CallOrWriteNode");
                self.opt_field("receiver", node.receiver());
                self.call_operator_loc_field(node.call_operator_loc());
                self.message_loc_field(node.message_loc());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::CallTargetNode { .. } => {
                let node = node.as_call_target_node().unwrap();
                self.start_node("CallTargetNode");
                self.node_field("receiver", node.receiver());
                self.opt_loc_field("call_operator_loc", Some(node.call_operator_loc()));
                self.message_loc_field(Some(node.message_loc()));
                self.end_node();
            }

            prism::Node::CapturePatternNode { .. } => {
                let node = node.as_capture_pattern_node().unwrap();
                self.start_node("CapturePatternNode");
                self.node_field("value", node.value());
                self.node_field("target", node.target());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::CaseMatchNode { .. } => {
                let node = node.as_case_match_node().unwrap();
                self.start_node("CaseMatchNode");
                self.opt_field("predicate", node.predicate());
                self.list_field("conditions", node.conditions());
                self.opt_field("consequent", node.consequent().map(|n| n.as_node()));
                self.opt_loc_field("case_keyword_loc", Some(node.case_keyword_loc()));
                self.opt_loc_field("end_keyword_loc", Some(node.end_keyword_loc()));
                self.end_node();
            }

            prism::Node::CaseNode { .. } => {
                let node = node.as_case_node().unwrap();
                self.start_node("CaseNode");
                self.opt_field("predicate", node.predicate());
                self.list_field("conditions", node.conditions());
                self.opt_field("consequent", node.consequent().map(|n| n.as_node()));
                self.opt_loc_field("case_keyword_loc", Some(node.case_keyword_loc()));
                self.opt_loc_field("end_keyword_loc", Some(node.end_keyword_loc()));
                self.end_node();
            }

            prism::Node::ClassNode { .. } => {
                let node = node.as_class_node().unwrap();
                self.start_node("ClassNode");
                self.opt_loc_field("class_keyword_loc", Some(node.class_keyword_loc()));
                self.node_field("constant_path", node.constant_path());
                self.opt_loc_field("inheritance_operator_loc", node.inheritance_operator_loc());
                self.opt_field("superclass", node.superclass());
                self.opt_field("body", node.body());
                self.opt_loc_field("end_keyword_loc", Some(node.end_keyword_loc()));
                self.end_node();
            }

            prism::Node::ClassVariableAndWriteNode { .. } => {
                let node = node.as_class_variable_and_write_node().unwrap();
                self.start_node("ClassVariableAndWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::ClassVariableOperatorWriteNode { .. } => {
                let node = node.as_class_variable_operator_write_node().unwrap();
                self.start_node("ClassVariableOperatorWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_loc_field("binary_operator_loc", Some(node.binary_operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::ClassVariableOrWriteNode { .. } => {
                let node = node.as_class_variable_or_write_node().unwrap();
                self.start_node("ClassVariableOrWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::ClassVariableReadNode { .. } => {
                self.atom_node("ClassVariableReadNode", node);
            }

            prism::Node::ClassVariableTargetNode { .. } => {
                self.atom_node("ClassVariableTargetNode", node);
            }

            prism::Node::ClassVariableWriteNode { .. } => {
                let node = node.as_class_variable_write_node().unwrap();
                self.start_node("ClassVariableWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.node_field("value", node.value());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::ConstantAndWriteNode { .. } => {
                let node = node.as_constant_and_write_node().unwrap();
                self.start_node("ConstantAndWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::ConstantOperatorWriteNode { .. } => {
                let node = node.as_constant_operator_write_node().unwrap();
                self.start_node("ConstantOperatorWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_loc_field("binary_operator_loc", Some(node.binary_operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::ConstantOrWriteNode { .. } => {
                let node = node.as_constant_or_write_node().unwrap();
                self.start_node("ConstantOrWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::ConstantPathAndWriteNode { .. } => {
                let node = node.as_constant_path_and_write_node().unwrap();
                self.start_node("ConstantPathAndWriteNode");
                self.node_field("target", node.target().as_node());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::ConstantPathNode { .. } => {
                let node = node.as_constant_path_node().unwrap();
                self.start_node("ConstantPathNode");
                self.opt_field("parent", node.parent());
                self.opt_loc_field("delimiter_loc", Some(node.delimiter_loc()));
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.end_node();
            }

            prism::Node::ConstantPathOperatorWriteNode { .. } => {
                let node = node.as_constant_path_operator_write_node().unwrap();
                self.start_node("ConstantPathOperatorWriteNode");
                self.node_field("target", node.target().as_node());
                self.opt_loc_field("binary_operator_loc", Some(node.binary_operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::ConstantPathOrWriteNode { .. } => {
                let node = node.as_constant_path_or_write_node().unwrap();
                self.start_node("ConstantPathOrWriteNode");
                self.node_field("target", node.target().as_node());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::ConstantPathTargetNode { .. } => {
                let node = node.as_constant_path_target_node().unwrap();
                self.start_node("ConstantPathTargetNode");
                self.opt_field("parent", node.parent());
                self.opt_loc_field("delimiter_loc", Some(node.delimiter_loc()));
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.end_node();
            }

            prism::Node::ConstantPathWriteNode { .. } => {
                let node = node.as_constant_path_write_node().unwrap();
                self.start_node("ConstantPathWriteNode");
                self.node_field("target", node.target().as_node());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::ConstantReadNode { .. } => {
                self.atom_node("ConstantReadNode", node);
            }

            prism::Node::ConstantTargetNode { .. } => {
                self.atom_node("ConstantTargetNode", node);
            }

            prism::Node::ConstantWriteNode { .. } => {
                let node = node.as_constant_write_node().unwrap();
                self.start_node("ConstantWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.node_field("value", node.value());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::DefNode { .. } => {
                let node = node.as_def_node().unwrap();
                self.start_node("DefNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_field("receiver", node.receiver());
                self.opt_field("parameters", node.parameters().map(|n| n.as_node()));
                self.opt_field("body", node.body());
                self.opt_loc_field("def_keyword_loc", Some(node.def_keyword_loc()));
                self.opt_loc_field("operator_loc", node.operator_loc());
                self.opt_loc_field("equal_loc", node.equal_loc());
                self.opt_loc_field("end_keyword_loc", node.end_keyword_loc());
                self.end_node();
            }

            prism::Node::DefinedNode { .. } => {
                let node = node.as_defined_node().unwrap();
                self.start_node("DefinedNode");
                self.opt_loc_field("lparen_loc", node.lparen_loc());
                self.node_field("value", node.value());
                self.opt_loc_field("rparen_loc", node.rparen_loc());
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.end_node();
            }

            prism::Node::ElseNode { .. } => {
                let node = node.as_else_node().unwrap();
                self.start_node("ElseNode");
                self.opt_loc_field("else_keyword_loc", Some(node.else_keyword_loc()));
                self.opt_field("statements", node.statements().map(|n| n.as_node()));
                self.opt_loc_field("end_keyword_loc", node.end_keyword_loc());
                self.end_node();
            }

            prism::Node::EmbeddedStatementsNode { .. } => {
                let node = node.as_embedded_statements_node().unwrap();
                self.start_node("EmbeddedStatementsNode");
                self.opt_field("statements", node.statements().map(|n| n.as_node()));
                self.end_node();
            }

            prism::Node::EmbeddedVariableNode { .. } => {
                let node = node.as_embedded_variable_node().unwrap();
                self.start_node("EmbeddedVariableNode");
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("variable", node.variable());
                self.end_node();
            }

            prism::Node::EnsureNode { .. } => {
                let node = node.as_ensure_node().unwrap();
                self.start_node("EnsureNode");
                self.opt_loc_field("ensure_keyword_loc", Some(node.ensure_keyword_loc()));
                self.opt_field("statements", node.statements().map(|n| n.as_node()));
                self.opt_loc_field("end_keyword_loc", Some(node.end_keyword_loc()));
                self.end_node();
            }

            prism::Node::FalseNode { .. } => {
                self.atom_node("FalseNode", node);
            }

            prism::Node::FindPatternNode { .. } => {
                let node = node.as_find_pattern_node().unwrap();
                self.start_node("FindPatternNode");
                self.opt_field("constant", node.constant());
                self.node_field("left", node.left());
                self.list_field("requireds", node.requireds());
                self.node_field("right", node.right());
                self.end_node();
            }

            prism::Node::FlipFlopNode { .. } => {
                let node = node.as_flip_flop_node().unwrap();
                self.start_node("FlipFlopNode");
                self.opt_field("left", node.left());
                self.opt_field("right", node.right());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::FloatNode { .. } => {
                self.atom_node("FloatNode", node);
            }

            prism::Node::ForNode { .. } => {
                let node = node.as_for_node().unwrap();
                self.start_node("ForNode");
                self.node_field("index", node.index());
                self.node_field("collection", node.collection());
                self.opt_field("statements", node.statements().map(|n| n.as_node()));
                self.opt_loc_field("for_keyword_loc", Some(node.for_keyword_loc()));
                self.opt_loc_field("in_keyword_loc", Some(node.in_keyword_loc()));
                self.opt_loc_field("end_keyword_loc", Some(node.end_keyword_loc()));
                self.end_node();
            }

            prism::Node::ForwardingArgumentsNode { .. } => {
                self.atom_node("ForwardingArgumentsNode", node);
            }

            prism::Node::ForwardingParameterNode { .. } => {
                self.atom_node("ForwardingParameterNode", node);
            }

            prism::Node::ForwardingSuperNode { .. } => {
                let node = node.as_forwarding_super_node().unwrap();
                self.start_node("ForwardingSuperNode");
                self.opt_field("block", node.block().map(|n| n.as_node()));
                self.end_node();
            }

            prism::Node::GlobalVariableAndWriteNode { .. } => {
                let node = node.as_global_variable_and_write_node().unwrap();
                self.start_node("GlobalVariableAndWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::GlobalVariableOperatorWriteNode { .. } => {
                let node = node.as_global_variable_operator_write_node().unwrap();
                self.start_node("GlobalVariableOperatorWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_loc_field("binary_operator_loc", Some(node.binary_operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::GlobalVariableOrWriteNode { .. } => {
                let node = node.as_global_variable_or_write_node().unwrap();
                self.start_node("GlobalVariableOrWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::GlobalVariableReadNode { .. } => {
                self.atom_node("GlobalVariableReadNode", node);
            }

            prism::Node::GlobalVariableTargetNode { .. } => {
                self.atom_node("GlobalVariableTargetNode", node);
            }

            prism::Node::GlobalVariableWriteNode { .. } => {
                let node = node.as_global_variable_write_node().unwrap();
                self.start_node("GlobalVariableWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.node_field("value", node.value());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::HashNode { .. } => {
                let node = node.as_hash_node().unwrap();
                self.start_node("HashNode");
                self.list_field("elements", node.elements());
                self.end_node();
            }

            prism::Node::HashPatternNode { .. } => {
                let node = node.as_hash_pattern_node().unwrap();
                self.start_node("HashPatternNode");
                self.opt_field("constant", node.constant());
                self.list_field("elements", node.elements());
                self.opt_field("rest", node.rest());
                self.end_node();
            }

            prism::Node::IfNode { .. } => {
                let node = node.as_if_node().unwrap();
                self.start_node("IfNode");
                self.opt_loc_field("if_keyword_loc", node.if_keyword_loc());
                self.node_field("predicate", node.predicate());
                self.opt_field("statements", node.statements().map(|n| n.as_node()));
                self.opt_field("consequent", node.consequent());
                self.opt_loc_field("end_keyword_loc", node.end_keyword_loc());
                self.end_node();
            }

            prism::Node::ImaginaryNode { .. } => {
                let node = node.as_imaginary_node().unwrap();
                self.start_node("ImaginaryNode");
                self.node_field("numeric", node.numeric());
                self.end_node();
            }

            prism::Node::ImplicitNode { .. } => {
                let node = node.as_implicit_node().unwrap();
                self.start_node("ImplicitNode");
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::ImplicitRestNode { .. } => {
                self.atom_node("ImplicitRestNode", node);
            }

            prism::Node::InNode { .. } => {
                let node = node.as_in_node().unwrap();
                self.start_node("InNode");
                self.node_field("pattern", node.pattern());
                self.opt_field("statements", node.statements().map(|n| n.as_node()));
                self.opt_loc_field("in_loc", Some(node.in_loc()));
                self.end_node();
            }

            prism::Node::IndexAndWriteNode { .. } => {
                let node = node.as_index_and_write_node().unwrap();
                self.start_node("IndexAndWriteNode");
                self.opt_field("receiver", node.receiver());
                self.call_operator_loc_field(node.call_operator_loc());
                self.opt_field("arguments", node.arguments().map(|n| n.as_node()));
                self.opt_field("block", node.block());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::IndexOperatorWriteNode { .. } => {
                let node = node.as_index_operator_write_node().unwrap();
                self.start_node("IndexOperatorWriteNode");
                self.opt_field("receiver", node.receiver());
                self.call_operator_loc_field(node.call_operator_loc());
                self.opt_field("arguments", node.arguments().map(|n| n.as_node()));
                self.opt_field("block", node.block());
                self.opt_loc_field("binary_operator_loc", Some(node.binary_operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::IndexOrWriteNode { .. } => {
                let node = node.as_index_or_write_node().unwrap();
                self.start_node("IndexOrWriteNode");
                self.opt_field("receiver", node.receiver());
                self.call_operator_loc_field(node.call_operator_loc());
                self.opt_field("arguments", node.arguments().map(|n| n.as_node()));
                self.opt_field("block", node.block());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::IndexTargetNode { .. } => {
                let node = node.as_index_target_node().unwrap();
                self.start_node("IndexTargetNode");
                self.node_field("receiver", node.receiver());
                self.opt_field("arguments", node.arguments().map(|n| n.as_node()));
                self.opt_field("block", node.block());
                self.end_node();
            }

            prism::Node::InstanceVariableAndWriteNode { .. } => {
                let node = node.as_instance_variable_and_write_node().unwrap();
                self.start_node("InstanceVariableAndWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::InstanceVariableOperatorWriteNode { .. } => {
                let node = node.as_instance_variable_operator_write_node().unwrap();
                self.start_node("InstanceVariableOperatorWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_loc_field("binary_operator_loc", Some(node.binary_operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::InstanceVariableOrWriteNode { .. } => {
                let node = node.as_instance_variable_or_write_node().unwrap();
                self.start_node("InstanceVariableOrWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::InstanceVariableReadNode { .. } => {
                self.atom_node("InstanceVariableReadNode", node);
            }

            prism::Node::InstanceVariableTargetNode { .. } => {
                self.atom_node("InstanceVariableTargetNode", node);
            }

            prism::Node::InstanceVariableWriteNode { .. } => {
                let node = node.as_instance_variable_write_node().unwrap();
                self.start_node("InstanceVariableWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.node_field("value", node.value());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::IntegerNode { .. } => {
                self.atom_node("IntegerNode", node);
            }

            prism::Node::InterpolatedMatchLastLineNode { .. } => {
                let node = node.as_interpolated_match_last_line_node().unwrap();
                self.start_node("InterpolatedMatchLastLineNode");
                self.list_field("parts", node.parts());
                self.end_node();
            }

            prism::Node::InterpolatedRegularExpressionNode { .. } => {
                let node = node.as_interpolated_regular_expression_node().unwrap();
                self.start_node("InterpolatedRegularExpressionNode");
                self.list_field("parts", node.parts());
                self.end_node();
            }

            prism::Node::InterpolatedStringNode { .. } => {
                let node = node.as_interpolated_string_node().unwrap();
                self.interpolated_string_node("InterpolatedStringNode", node);
            }

            prism::Node::InterpolatedSymbolNode { .. } => {
                let node = node.as_interpolated_symbol_node().unwrap();
                self.start_node("InterpolatedSymbolNode");
                self.list_field("parts", node.parts());
                self.end_node();
            }

            prism::Node::InterpolatedXStringNode { .. } => {
                let node = node.as_interpolated_x_string_node().unwrap();
                self.interpolated_x_string_node("InterpolatedXStringNode", node);
            }

            prism::Node::ItLocalVariableReadNode { .. } => {
                self.atom_node("ItLocalVariableReadNode", node);
            }

            prism::Node::ItParametersNode { .. } => {
                let node = node.as_it_parameters_node().unwrap();
                self.it_parameters_node("ItParametersNode", node);
            }

            prism::Node::KeywordHashNode { .. } => {
                let node = node.as_keyword_hash_node().unwrap();
                self.start_node("KeywordHashNode");
                self.list_field("elements", node.elements());
                self.end_node();
            }

            prism::Node::KeywordRestParameterNode { .. } => {
                let node = node.as_keyword_rest_parameter_node().unwrap();
                self.start_node("KeywordRestParameterNode");
                self.opt_loc_field("name_loc", node.name_loc());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::LambdaNode { .. } => {
                let node = node.as_lambda_node().unwrap();
                self.start_node("LambdaNode");
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.opt_field("parameters", node.parameters());
                self.opt_field("body", node.body());
                self.end_node();
            }

            prism::Node::LocalVariableAndWriteNode { .. } => {
                let node = node.as_local_variable_and_write_node().unwrap();
                self.start_node("LocalVariableAndWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::LocalVariableOperatorWriteNode { .. } => {
                let node = node.as_local_variable_operator_write_node().unwrap();
                self.start_node("LocalVariableOperatorWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_loc_field("binary_operator_loc", Some(node.binary_operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::LocalVariableOrWriteNode { .. } => {
                let node = node.as_local_variable_or_write_node().unwrap();
                self.start_node("LocalVariableOrWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::LocalVariableReadNode { .. } => {
                self.atom_node("LocalVariableReadNode", node);
            }

            prism::Node::LocalVariableTargetNode { .. } => {
                self.atom_node("LocalVariableTargetNode", node);
            }

            prism::Node::LocalVariableWriteNode { .. } => {
                let node = node.as_local_variable_write_node().unwrap();
                self.start_node("LocalVariableWriteNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.node_field("value", node.value());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::MatchLastLineNode { .. } => {
                let node = node.as_match_last_line_node().unwrap();
                self.start_node("MatchLastLineNode");
                self.string_content(node.content_loc().as_slice().to_vec());
                self.end_node();
            }

            prism::Node::MatchPredicateNode { .. } => {
                let node = node.as_match_predicate_node().unwrap();
                self.start_node("MatchPredicateNode");
                self.node_field("value", node.value());
                self.node_field("pattern", node.pattern());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::MatchRequiredNode { .. } => {
                let node = node.as_match_required_node().unwrap();
                self.start_node("MatchRequiredNode");
                self.node_field("value", node.value());
                self.node_field("pattern", node.pattern());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::MatchWriteNode { .. } => {
                let node = node.as_match_write_node().unwrap();
                self.start_node("MatchWriteNode");
                self.node_field("call", node.call().as_node());
                self.list_field("targets", node.targets());
                self.end_node();
            }

            prism::Node::MissingNode { .. } => {
                self.atom_node("MissingNode", node);
            }

            prism::Node::ModuleNode { .. } => {
                let node = node.as_module_node().unwrap();
                self.start_node("ModuleNode");
                self.opt_loc_field("module_keyword_loc", Some(node.module_keyword_loc()));
                self.node_field("constant_path", node.constant_path());
                self.opt_field("body", node.body());
                self.opt_loc_field("end_keyword_loc", Some(node.end_keyword_loc()));
                self.end_node();
            }

            prism::Node::MultiTargetNode { .. } => {
                let node = node.as_multi_target_node().unwrap();
                self.start_node("MultiTargetNode");
                self.list_field("lefts", node.lefts());
                self.opt_field("rest", node.rest());
                self.list_field("rights", node.rights());
                self.opt_loc_field("lparen_loc", node.lparen_loc());
                self.opt_loc_field("rparen_loc", node.rparen_loc());
                self.end_node();
            }

            prism::Node::MultiWriteNode { .. } => {
                let node = node.as_multi_write_node().unwrap();
                self.start_node("MultiWriteNode");
                self.list_field("lefts", node.lefts());
                self.opt_field("rest", node.rest());
                self.list_field("rights", node.rights());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::NextNode { .. } => {
                let node = node.as_next_node().unwrap();
                self.start_node("NextNode");
                self.opt_field("arguments", node.arguments().map(|n| n.as_node()));
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.end_node();
            }

            prism::Node::NilNode { .. } => {
                self.atom_node("NilNode", node);
            }

            prism::Node::NoKeywordsParameterNode { .. } => {
                let node = node.as_no_keywords_parameter_node().unwrap();
                self.start_node("NoKeywordsParameterNode");
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.end_node();
            }

            prism::Node::NumberedParametersNode { .. } => {
                let node = node.as_numbered_parameters_node().unwrap();
                self.numbered_parameters_node("NumberedParametersNode", node);
            }

            prism::Node::NumberedReferenceReadNode { .. } => {
                self.atom_node("NumberedReferenceReadNode", node);
            }

            prism::Node::OptionalKeywordParameterNode { .. } => {
                let node = node.as_optional_keyword_parameter_node().unwrap();
                self.start_node("OptionalKeywordParameterNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::OptionalParameterNode { .. } => {
                let node = node.as_optional_parameter_node().unwrap();
                self.start_node("OptionalParameterNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("value", node.value());
                self.end_node();
            }

            prism::Node::OrNode { .. } => {
                let node = node.as_or_node().unwrap();
                self.start_node("OrNode");
                self.node_field("left", node.left());
                self.node_field("right", node.right());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::ParametersNode { .. } => {
                let node = node.as_parameters_node().unwrap();
                self.start_node("ParametersNode");
                self.list_field("requireds", node.requireds());
                self.list_field("optionals", node.optionals());
                self.opt_field("rest", node.rest());
                self.list_field("posts", node.posts());
                self.list_field("keywords", node.keywords());
                self.opt_field("keyword_rest", node.keyword_rest());
                self.opt_field("block", node.block().map(|n| n.as_node()));
                self.end_node();
            }

            prism::Node::ParenthesesNode { .. } => {
                let node = node.as_parentheses_node().unwrap();
                self.start_node("ParenthesesNode");
                self.opt_field("body", node.body());
                self.end_node();
            }

            prism::Node::PinnedExpressionNode { .. } => {
                let node = node.as_pinned_expression_node().unwrap();
                self.start_node("PinnedExpressionNode");
                self.node_field("expression", node.expression());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.opt_loc_field("lparen_loc", Some(node.lparen_loc()));
                self.opt_loc_field("rparen_loc", Some(node.rparen_loc()));
                self.end_node();
            }

            prism::Node::PinnedVariableNode { .. } => {
                let node = node.as_pinned_variable_node().unwrap();
                self.start_node("PinnedVariableNode");
                self.node_field("variable", node.variable());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::PostExecutionNode { .. } => {
                let node = node.as_post_execution_node().unwrap();
                self.start_node("PostExecutionNode");
                self.opt_field("statements", node.statements().map(|n| n.as_node()));
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.end_node();
            }

            prism::Node::PreExecutionNode { .. } => {
                let node = node.as_pre_execution_node().unwrap();
                self.start_node("PreExecutionNode");
                self.opt_field("statements", node.statements().map(|n| n.as_node()));
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.end_node();
            }

            prism::Node::ProgramNode { .. } => {
                let node = node.as_program_node().unwrap();
                self.start_node("ProgramNode");
                self.node_field("statements", node.statements().as_node());
                self.end_node();
            }

            prism::Node::RangeNode { .. } => {
                let node = node.as_range_node().unwrap();
                self.start_node("RangeNode");
                self.opt_field("left", node.left());
                self.opt_field("right", node.right());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::RationalNode { .. } => {
                self.atom_node("RationalNode", node);
            }

            prism::Node::RedoNode { .. } => {
                self.atom_node("RedoNode", node);
            }

            prism::Node::RegularExpressionNode { .. } => {
                let node = node.as_regular_expression_node().unwrap();
                self.start_node("RegularExpressionNode");
                self.string_content(node.content_loc().as_slice().to_vec());
                self.end_node();
            }

            prism::Node::RequiredKeywordParameterNode { .. } => {
                let node = node.as_required_keyword_parameter_node().unwrap();
                self.start_node("RequiredKeywordParameterNode");
                self.opt_loc_field("name_loc", Some(node.name_loc()));
                self.end_node();
            }

            prism::Node::RequiredParameterNode { .. } => {
                self.atom_node("RequiredParameterNode", node);
            }

            prism::Node::RescueModifierNode { .. } => {
                let node = node.as_rescue_modifier_node().unwrap();
                self.start_node("RescueModifierNode");
                self.node_field("expression", node.expression());
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.node_field("rescue_expression", node.rescue_expression());
                self.end_node();
            }

            prism::Node::RescueNode { .. } => {
                let node = node.as_rescue_node().unwrap();
                self.start_node("RescueNode");
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.list_field("exceptions", node.exceptions());
                self.opt_loc_field("operator_loc", node.operator_loc());
                self.opt_field("reference", node.reference());
                self.opt_field("statements", node.statements().map(|n| n.as_node()));
                self.opt_field("consequent", node.consequent().map(|n| n.as_node()));
                self.end_node();
            }

            prism::Node::RestParameterNode { .. } => {
                let node = node.as_rest_parameter_node().unwrap();
                self.start_node("RestParameterNode");
                self.opt_loc_field("name_loc", node.name_loc());
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.end_node();
            }

            prism::Node::RetryNode { .. } => {
                self.atom_node("RetryNode", node);
            }

            prism::Node::ReturnNode { .. } => {
                let node = node.as_return_node().unwrap();
                self.start_node("ReturnNode");
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.opt_field("arguments", node.arguments().map(|n| n.as_node()));
                self.end_node();
            }

            prism::Node::SelfNode { .. } => {
                self.atom_node("SelfNode", node);
            }

            prism::Node::ShareableConstantNode { .. } => {
                let node = node.as_shareable_constant_node().unwrap();
                self.start_node("ShareableConstantNode");
                self.node_field("write", node.write());
                self.end_node();
            }

            prism::Node::SingletonClassNode { .. } => {
                let node = node.as_singleton_class_node().unwrap();
                self.start_node("SingletonClassNode");
                self.opt_loc_field("class_keyword_loc", Some(node.class_keyword_loc()));
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.node_field("expression", node.expression());
                self.opt_field("body", node.body());
                self.opt_loc_field("end_keyword_loc", Some(node.end_keyword_loc()));
                self.end_node();
            }

            prism::Node::SourceEncodingNode { .. } => {
                self.atom_node("SourceEncodingNode", node);
            }

            prism::Node::SourceFileNode { .. } => {
                self.atom_node("SourceFileNode", node);
            }

            prism::Node::SourceLineNode { .. } => {
                self.atom_node("SourceLineNode", node);
            }

            prism::Node::SplatNode { .. } => {
                let node = node.as_splat_node().unwrap();
                self.start_node("SplatNode");
                self.opt_loc_field("operator_loc", Some(node.operator_loc()));
                self.opt_field("expression", node.expression());
                self.end_node();
            }

            prism::Node::StatementsNode { .. } => {
                let node = node.as_statements_node().unwrap();
                self.start_node("StatementsNode");
                self.list_field("body", node.body());
                self.end_node();
            }

            prism::Node::StringNode { .. } => {
                let node = node.as_string_node().unwrap();
                self.string_node("StringNode", node);
            }

            prism::Node::SuperNode { .. } => {
                let node = node.as_super_node().unwrap();
                self.start_node("SuperNode");
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.opt_loc_field("lparen_loc", node.lparen_loc());
                self.opt_field("arguments", node.arguments().map(|n| n.as_node()));
                self.opt_loc_field("rparen_loc", node.rparen_loc());
                self.opt_field("block", node.block());
                self.end_node();
            }

            prism::Node::SymbolNode { .. } => {
                let node = node.as_symbol_node().unwrap();
                self.start_node("SymbolNode");
                self.opt_loc_field("value_loc", node.value_loc());
                self.end_node();
            }

            prism::Node::TrueNode { .. } => {
                self.atom_node("TrueNode", node);
            }

            prism::Node::UndefNode { .. } => {
                let node = node.as_undef_node().unwrap();
                self.start_node("UndefNode");
                self.list_field("names", node.names());
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.end_node();
            }

            prism::Node::UnlessNode { .. } => {
                let node = node.as_unless_node().unwrap();
                self.start_node("UnlessNode");
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.node_field("predicate", node.predicate());
                self.opt_field("statements", node.statements().map(|n| n.as_node()));
                self.opt_field("consequent", node.consequent().map(|n| n.as_node()));
                self.opt_loc_field("end_keyword_loc", node.end_keyword_loc());
                self.end_node();
            }

            prism::Node::UntilNode { .. } => {
                let node = node.as_until_node().unwrap();
                self.start_node("UntilNode");
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.node_field("predicate", node.predicate());
                self.opt_field("statements", node.statements().map(|n| n.as_node()));
                self.end_node();
            }

            prism::Node::WhenNode { .. } => {
                let node = node.as_when_node().unwrap();
                self.start_node("WhenNode");
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.list_field("conditions", node.conditions());
                self.opt_field("statements", node.statements().map(|n| n.as_node()));
                self.end_node();
            }

            prism::Node::WhileNode { .. } => {
                let node = node.as_while_node().unwrap();
                self.start_node("WhileNode");
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.node_field("predicate", node.predicate());
                self.opt_field("statements", node.statements().map(|n| n.as_node()));
                self.end_node();
            }

            prism::Node::XStringNode { .. } => {
                let node = node.as_x_string_node().unwrap();
                self.x_string_node("XStringNode", node);
            }

            prism::Node::YieldNode { .. } => {
                let node = node.as_yield_node().unwrap();
                self.start_node("YieldNode");
                self.opt_loc_field("keyword_loc", Some(node.keyword_loc()));
                self.opt_loc_field("lparen_loc", node.lparen_loc());
                self.opt_field("arguments", node.arguments().map(|n| n.as_node()));
                self.opt_loc_field("rparen_loc", node.rparen_loc());
                self.end_node();
            }
        }
    }
}
